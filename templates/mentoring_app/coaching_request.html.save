{% extends 'base_site.html' %}
{% load crispy_forms_tags %}
{% load i18n %}
{% load static %}

{% block title %}{% trans 'Mentee coaching' %}{% endblock %}

{% block extra_styles %}
<style>

    .confirmation-message {
        position: fixed;
        min-height: 300px;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: #fff;
        box-shadow: 0 -2px 10px rgba(0,0,0,0.2);
        padding: 20px;
        z-index: 1050; /* Assurez-vous que cela s'affiche au-dessus des autres éléments */
    }

    .confirmation-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .close-confirmation {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
    }

    .confirmation-content img {
        width: 50px; /* Ajustez selon la taille de votre icône */
    }

    .confirmation-content h3 {
        color: #28a745; /* La couleur verte indique un message de succès */
    }

    .btn-success {
        background-color: #28a745;
        border: none;
        padding: 10px 20px;
        co
    .btn-outline-primary {
        border: 1px solid #007bff;
        background: none;
        padding: 10px 20px;
        color: #007bff;
    }


    .message-title {
        margin-left: 8px;
        margin-right: 10px;
        font-size: 18px; /* Taille de police pour le titre */
        font-weight: bold; /* Rendre le texte gras */
    }

    .message-btn {
        margin-top: 20px; /* Ajoutez une marge en haut du bouton */
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        background-color: #007bff; /* Couleur bleue de Bootstrap */
        color: white;
        border-radius: 50%; /* Pour rendre le bouton circulaire */
        cursor: pointer;
        font-size: 24px;
        padding: 10px 20px; /* Ajustez le padding selon vos besoins */
    }

    /* Styles pour le container */
    .selected-dates {
        position: relative;
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        background-color: #f8f9fa; /* Couleur de fond légère */
        width: 100%; /* ou une largeur fixe selon votre design */
        max-width: 600px; /* ou la largeur maximale souhaitée */
        margin: 20px auto; /* Centrage horizontal avec une marge */
    }

</style>
{% endblock %}


{% block navbar %}
{% include 'nav_mentoring.html' %}
{% endblock %}

{% block content %}
    <!-- Section de gestion des demandes de coaching -->
    <section class="container mt-5 content-text-color">
        <h2>{% trans 'Managing coaching sessions'%}</h2>
        <p>{% trans 'You can accept or decline coaching requests here:' %}</p>

        <table class="table table-bordered table-striped content-text-color">
            <thead>
            <tr>
                <th>{% trans 'Mentore' %}</th>
                <th>{% trans 'Date' %}</th>
                <th>{% trans 'Time' %}</th>
                <th>{% trans 'Status' %}</th>
                <th>{% trans 'Actions' %}</th>
            </tr>
            </thead>
            <tbody>
            {% if coaching_requests %}
                {% for request in coaching_requests %}
                    <tr>
                        <td>{{ request.mentore.first_name }} {{ request.mentore.last_name }}</td>
                        <td>{{ request.date }}</td>
                        <td>{{ request.time }}</td>
                        <td>{{ request.status }}</td>
                        <td>
                            <form method="post" action="{% url 'accept_request' %}">
                                {% csrf_token %}
                                <input type="hidden" name="coaching_request_id" value="{{ request.id }}">
                                <button type="submit" class="btn btn-success">{% trans 'Accept' %}</button>
                            </form>
                            <!-- Formulaire pour refuser la demande -->
                            <form method="post" action="{% url 'reject_request' %}">
                                {% csrf_token %}
                                <input type="hidden" name="coaching_request_id" value="{{ request.id }}">
                                <button type="submit" class="btn btn-danger">{% trans 'Deny' %}</button>
                            </form>
                        </td>
                    </tr>
                {% endfor %}
            {% else %}
                <tr>
                    <td colspan="5" class="text-center">{% trans 'No applications pending at the moment.' %}</td>
                </tr>
            {% endif %}
            </tbody>
        </table>
    </section>

{% endblock %}

{% block extra_scripts %}
    <script>
        // Fermer la boîte de confirmation
        function closeConfirmationBox() {
            document.getElementById('messageBox').style.display = 'none';
        }

        document.addEventListener('DOMContentLoaded', function() {
            var messageBtn = document.getElementById('messageBtn');
            var messageBox = document.getElementById('messageBox');
            var confirmationBox = document.getElementById('confirmationMessage'); // ID de votre box de confirmation
            var sendMessage = document.getElementById('sendMessage');

            // Afficher la boîte de message
            messageBtn.addEventListener('click', function() {
                messageBox.style.display = 'block';
            });

            // Cacher la boîte de message lors du clic en dehors
            document.addEventListener('click', function(event) {
                if (!messageBox.contains(event.target) && !messageBtn.contains(event.target)) {
                    messageBox.style.display = 'none';
                }
            });

            // Gestion de l'envoi du message et affichage de la confirmation
            sendMessage.addEventListener('click', function() {
                var subject = document.getElementById('messageSubject').value; // Sujet du message
                var body = document.getElementById('messageText').value; // Corps du message
                var recipient = '{{ mentor_usr }}'; // Destinataire du message

                fetch('{% url 'send_message' %}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-CSRFToken': getCookie('csrftoken') // Assurez-vous d'obtenir le jeton CSRF
                    },
                    body: `subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}&recipient=${encodeURIComponent(recipient)}`
                })
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => { throw new Error(text) });
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log(data);
                        // Ne cachez pas la boîte de message, laissez-la ouverte
                        document.getElementById('messageText').value = ''; // Réinitialisez seulement le corps du message
                        confirmationBox.style.display = 'block'; // Affichez la boîte de confirmation
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        confirmationBox.textContent = error; // Affichez l'erreur pour le débogage
                        confirmationBox.style.display = 'block'; // Affichez la boîte de confirmation avec l'erreur
                    });
            });

            // Fonction pour obtenir le cookie CSRF
            function getCookie(name) {
                let cookieValue = null;
                if (document.cookie && document.cookie !== '') {
                    const cookies = document.cookie.split(';');
                    for (let i = 0; i < cookies.length; i++) {
                        const cookie = cookies[i].trim();
                        if (cookie.substring(0, name.length + 1) === (name + '=')) {
                            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                            break;
                        }
                    }
                }
                return cookieValue;
            }
        });

    </script>
{% endblock %}

